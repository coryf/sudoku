#!/usr/bin/env ruby -w

at_exit do
  puts 'EXITING'
  Curses.close_screen
end

require 'yaml'
require 'curses'
require 'pathname'

bin_file = Pathname.new(__FILE__)

$LOAD_PATH << bin_file.join('../../lib')
DATA_PATH = bin_file.join('../../data')

require 'board'
require 'board_data_file'
require 'board_view'
require 'optparse'

options = {}
option_parser = OptionParser.new do |o|
  o.on('--restarted', 'Internal - Trigger restart message') do
    options[:message] = '==Restarted=='
  end
end
options[:board_number] = option_parser.parse!.first


DATA_FILE       = DATA_PATH.join('sudoku17')
GRID_CHARS_FILE = DATA_PATH.join('grid_chars.yml')

def init_screen
  Curses.init_screen
  Curses.noecho # do not show typed keys
  Curses.cbreak
  Curses.curs_set(0)
  Curses.stdscr.keypad(true) # enable arrow keys
end

def restart!(options)
  args = ARGV.reject { |arg| arg =~ /\A--restarted/ }
  args.pop if args.last == options[:board_number].to_s

  exec [$0, '--restarted', *args, @view.board_number].join(' ')
end

def board_change(offset)
  board_number = @view.board_number + offset
  if board_data = @boards.find(board_number)
    @view.board = @board = Board.new(board_data)
    @view.board_number = board_number
  end
end

def render
  Curses.setpos(0, 0)
  Curses.addstr(@view.render)
  Curses.addstr("\n")
  Curses.clrtoeol
  Curses.addstr(@message) if defined?(@message)
  Curses.refresh
end

def autosolve_boards(options = {})
  Curses.timeout = 0

  start_time = Time.now
  seen_count = 0
  solved_count = 0
  boards_per_sec = 0
  next_duration_update = 5
  updates_per_sec = 2
  duration = 0.0
  do_render = true

  loop do
    seen_count += 1

    @board.solve

    solved_count += 1 if @board.solved?
    percent_solved = (solved_count * 100.0 / seen_count)
    if seen_count > next_duration_update
      duration = Time.now - start_time
      boards_per_sec = seen_count / duration
      next_duration_update = seen_count + (boards_per_sec / updates_per_sec)
      do_render = true
    end

    @message = "Solved %03.1f%% %d/%d %0.1f/s %0.1fs" % 
      [percent_solved, solved_count, seen_count, boards_per_sec, duration]

    if do_render
      render
      do_render = false
    end

    break if options[:max_boards] && seen_count >= options[:max_boards]

    break unless board_change(1)

    ch = Curses.getch
    break if ch == 'q'
  end

  Curses.timeout = -1
end

@grid_chars = YAML.load_file(GRID_CHARS_FILE)
@boards = BoardDataFile.new(DATA_FILE)

init_screen

board_number = (options[:board_number] || 1).to_i
@board = Board.new(@boards.find(board_number))
@view = BoardView.new(@board, @grid_chars)
@view.message = options[:message]
@view.board_number = board_number

loop do
  render

  ch = Curses.getch
  case ch
  when 'k', Curses::Key::UP    then @board.move(-1, 0)
  when 'j', Curses::Key::DOWN  then @board.move( 1, 0)
  when 'l', Curses::Key::RIGHT then @board.move( 0, 1)
  when 'h', Curses::Key::LEFT  then @board.move( 0,-1)
  when 'i' then @board.iterate_solution
  when 'r' then restart!(options)
  when 'n' then board_change(1)
  when 'p' then board_change(-1)
  when 'a' then autosolve_boards
  when 't' then autosolve_boards(max_boards: 1000)
  when 'q' then break
  end
end
